/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication13;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Aggregates.limit;
import org.bson.Document;
import com.mongodb.client.model.Filters; 
import com.mongodb.client.model.Updates;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author Admin
 */
public class frameChat extends javax.swing.JFrame implements Runnable{
    Socket client;
    ServerSocket server;
    BufferedReader Server_Reader, Client_Reader;
    BufferedWriter Server_Writer,Client_Writer;
    static volatile boolean finished = false;
    MongoClient mongoclient=new MongoClient("localhost",27017);
        MongoDatabase database=mongoclient.getDatabase("Database1");
        //DB database = mongoClient.getDB("Database1");
        MongoCollection<Document> coll=database.getCollection("Server");
        MongoCollection<Document> coll1=database.getCollection("Friends");
        Document document1;
        //document1=new Document();
    

    /**
     *
     */
    public String name1,name2;
    public static String name3;
    Thread thread1,thread2;
    /**
     * Creates new form frameChat
     */
    public frameChat() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jBabout = new javax.swing.JButton();
        jBon = new javax.swing.JButton();
        jCBserver = new javax.swing.JComboBox<>();
        jTusername = new javax.swing.JTextField();
        jTchat = new javax.swing.JTextField();
        jBsend = new javax.swing.JButton();
        Lchat = new java.awt.List();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 0, 0));

        jBabout.setBackground(new java.awt.Color(204, 0, 51));
        jBabout.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBabout.setForeground(new java.awt.Color(255, 255, 255));
        jBabout.setText(" ABOUT  ");
        jBabout.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBabout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBabout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBaboutActionPerformed(evt);
            }
        });

        jBon.setBackground(new java.awt.Color(204, 0, 51));
        jBon.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBon.setForeground(new java.awt.Color(255, 255, 255));
        jBon.setText("ON");
        jBon.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBonActionPerformed(evt);
            }
        });

        jCBserver.setBackground(new java.awt.Color(204, 0, 51));
        jCBserver.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCBserver.setForeground(new java.awt.Color(255, 255, 255));
        jCBserver.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SERVER", "CLIENT" }));
        jCBserver.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jCBserver.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBserverItemStateChanged(evt);
            }
        });
        jCBserver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBserverActionPerformed(evt);
            }
        });

        jTusername.setBackground(new java.awt.Color(255, 102, 102));
        jTusername.setForeground(new java.awt.Color(255, 255, 255));
        jTusername.setText("SERVER");
        jTusername.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTusernameActionPerformed(evt);
            }
        });

        jTchat.setBackground(new java.awt.Color(255, 102, 102));
        jTchat.setForeground(new java.awt.Color(255, 255, 255));
        jTchat.setText("Start typing your message...");
        jTchat.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTchat.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTchat.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jTchat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTchatActionPerformed(evt);
            }
        });

        jBsend.setBackground(new java.awt.Color(204, 0, 51));
        jBsend.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBsend.setForeground(new java.awt.Color(255, 255, 255));
        jBsend.setText("Send");
        jBsend.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBsend.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBsend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsendActionPerformed(evt);
            }
        });

        Lchat.setBackground(new java.awt.Color(253, 238, 238));
        Lchat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LchatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTusername)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jTchat)
                .addGap(0, 0, 0)
                .addComponent(jBsend, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jCBserver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(jBon, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(jBabout, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(Lchat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBabout)
                    .addComponent(jBon)
                    .addComponent(jCBserver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTusername, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Lchat, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBsend, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addComponent(jTchat)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCBserverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBserverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBserverActionPerformed

    private void jBonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBonActionPerformed
        // TODO add your handling code here:
        switch (jBon.getText()) {
            case "CONNECT":
                {
                    //jBon.setText("DISCONNECT");
                    //name2=jTusername.getText();
                    client_connection();
                    thread2=new Thread(this);
                    thread2.start();
                    thread2.setName(jTusername.getText());
                    //Document document1;
                   document1=new Document();
                   
                    //document1.put("Server",thread1.getName().toString());
                   document1.put("Client",thread2.getName().toString());
                   
                   // document1.put("Server","Ria");
                    //document1.put("Client","Sia");
                    //coll1.updateOne({$natural:-1}, {$set:{"Client":thread2.getName().toString()}});
                    //({"_id":-1},{$set:{"Client":thread2.getName().toString()}})
                    //coll1.findAndModify({"query": {},"sort": {'_id': -1},"update": {$set: {"Client": thread2.getName()}}});
                    //coll1.findOneAndUpdate({'_id': -1}, {$set: {"Client": thread2.getName()}});
                    coll1.insertOne(document1);
                   // coll1.updateOne(Filters.eq("id", -1), Updates.set("Client", thread2.getName()));
                    //coll1.updateOne(Filters.eq(coll1.find().sort({"_id":-1}).limit(1)), Updates.set("Client", thread2.getName()));
                    break;
                }
            case "OFF":
            {
                finished=true;
            
            try {
                stopped_by_server();
            } catch (IOException ex) {
                Logger.getLogger(frameChat.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;
            }
                
            case "ON":
                {
                    jBon.setText("OFF");
                    //name1=jTusername.getText().toString();
                    //name1="hii";
                    read_connection();
                    thread1=new Thread(this);
                    thread1.start();
                    thread1.setName(jTusername.getText());
                    document1=new Document();
                    document1.put("Server",thread1.getName().toString());
                    coll1.insertOne(document1);
                    System.out.println("**");
                    
                    
                    break;
                }
            case "DISCONNECT":
            {
                finished=true;
            
            try {
                disconnected_by_client();
            } catch (InterruptedException ex) {
                Logger.getLogger(frameChat.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;
            }
                
            default:
                break;
        }
        
    }//GEN-LAST:event_jBonActionPerformed

    private void jBsendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsendActionPerformed
       // MongoClient mongoclient=new MongoClient("localhost",27017);
        //MongoDatabase database=mongoclient.getDatabase("Database1");
        //DB database = mongoClient.getDB("Database1");
        //MongoCollection<Document> coll=database.getCollection("Server");
        //MongoCollection<Document> coll1=database.getCollection("Friends");
        //DBCollection collection = database.getCollection("Server");
        Document document;
        document=new Document();
        
        
        
        try{
            
            Server_Writer.write(jTusername.getText()+": "+jTchat.getText());
            document.put(jTusername.getText(),jTchat.getText());
            
            
            Server_Writer.newLine();
            Server_Writer.flush();
        }catch(IOException ex){
            Logger.getLogger(frameChat.class.getName()).log(Level.SEVERE,null,ex);
        }
        //Lchat.add("Me: "+jTchat.getText());
        coll.insertOne(document);
        
       /* if(!jTusername.getText().equals(name1)){
            System.out.print("+++");
            
            name2=jTusername.getText();
            //MongoCollection<Document> coll1=database.getCollection("Friends");

                Document document1;
                document1=new Document();
                document1.put("Server",name1);
                document1.put("Client",name2);
                coll1.insertOne(document1);
                System.out.println(name1+"    "+name2);
        }*/
        Lchat.add("Me: "+jTchat.getText());
        jTchat.setText("");
    }//GEN-LAST:event_jBsendActionPerformed

    private void jCBserverItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBserverItemStateChanged
        // TODO add your handling code here:
        if(jCBserver.getSelectedItem().equals("SERVER")){
            jBon.setText("ON");
            jTusername.setText("SERVER");
        }
        else{
            jBon.setText("CONNECT");
            jTusername.setText("CLIENT");
        }
    }//GEN-LAST:event_jCBserverItemStateChanged

    private void jTusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTusernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTusernameActionPerformed

    private void jTchatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTchatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTchatActionPerformed

    private void jBaboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBaboutActionPerformed
        name3=jTusername.getText();
       
        About1 ob=new About1();
        ob.setVisible(true);
        
    }//GEN-LAST:event_jBaboutActionPerformed

    private void LchatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LchatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LchatActionPerformed
    private void client_connection(){
        try{
            String ip=JOptionPane.showInputDialog("IP Address: ");
            client = new Socket(ip,2000);
           
            jCBserver.setEnabled(false);
            Server_Reader =new BufferedReader(new InputStreamReader(client.getInputStream()));
            Server_Writer = new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));
            jBon.setText("DISCONNECT");
            
        }catch(UnknownHostException ex){
            System.out.println("Accept Failed");
            System.exit(-1);
        }catch(IOException ex){
            Logger.getLogger(frameChat.class.getName()).log(Level.SEVERE,null,ex);
        }
        
    }
    
    private void read_connection(){
        try{
            try{
                try{
                    server=new ServerSocket(2000);
                    //name1=thread1.jTusername.getText();
                    this.setTitle("Please wait...");
                }catch(IOException ex){
                    System.out.println("Could not listen");
                    System.exit(-1);
                    
                }
                client=server.accept();
                this.setTitle("Connected"+client.getInetAddress());
                
               /*MongoClient mongoclient=new MongoClient("localhost",27017);
                MongoDatabase database=mongoclient.getDatabase("Database1");
                MongoCollection<Document> coll1=database.getCollection("Friends");*/

                /*Document document1;
                document1=new Document();
                document1.put("Server",thread1.getName());
                document1.put("Client",thread2.getName());
                
                
                coll1.insertOne(document1);*/
                
                
            }catch(IOException ex){
                System.out.println("Accept failed");
                System.exit(-1);
            }
            
            Server_Reader = new BufferedReader(new InputStreamReader(client.getInputStream()));
            Server_Writer = new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));
        }catch(IOException ex){
            System.out.println("Read failed");
            System.exit(-1);
            
        }
    }
    
    private void disconnected_by_client() throws InterruptedException{
        
        try{
            server.close();
            client.close();
            
            Server_Reader.close();
            Server_Writer.close();
            
            jCBserver.setEnabled(true);
            jBon.setText("Connect");
        }catch(IOException ex){
            Logger.getLogger(frameChat.class.getName()).log(Level.SEVERE,null,ex);
        }
        System.exit(-1);
       
    }
    
    private void stopped_by_server() throws IOException{
       
            server.close();
            client.close();
            Server_Reader.close();
            Server_Writer.close();
            jBon.setText("ON");
            setTitle("DISCONNECT");
            
        
        
        System.exit(-1);
        //disconnected_by_client();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       /* try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run(){
                new frameChat().setVisible(true);
            }
            
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.List Lchat;
    private javax.swing.JButton jBabout;
    private javax.swing.JButton jBon;
    private javax.swing.JButton jBsend;
    private javax.swing.JComboBox<String> jCBserver;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTchat;
    private javax.swing.JTextField jTusername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       
        while(!finished){
            try{
                //Lchat.add(Server_Reader.readLine());
                //Lchat.add(Server_Reader.readLine());
                Lchat.add(Server_Reader.readLine());
            }catch(IOException ex){
                Logger.getLogger(frameChat.class.getName()).log(Level.SEVERE,null,ex);
            }
        }
                //new frameChat().setVisible(true);
            
    }
}
